(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{178:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"堆-stack-与栈-heap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆-stack-与栈-heap"}},[t._v("#")]),t._v(" 堆(Stack)与栈(Heap)")]),t._v(" "),s("h2",{attrs:{id:"_1、空间分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、空间分配"}},[t._v("#")]),t._v(" 1、空间分配")]),t._v(" "),s("p",[t._v("栈（Stack）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。一般存储"),s("strong",[t._v("值类型")]),t._v("\n堆（Heap）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。一般存储"),s("strong",[t._v("引用类型")])]),t._v(" "),s("h2",{attrs:{id:"_2、缓存方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、缓存方式"}},[t._v("#")]),t._v(" 2、缓存方式")]),t._v(" "),s("p",[t._v("栈（Stack）：使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放。\n堆（Heap）：则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。")]),t._v(" "),s("h2",{attrs:{id:"_3、效率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、效率"}},[t._v("#")]),t._v(" 3、效率")]),t._v(" "),s("p",[t._v("栈（Stack）：由系统自动分配，速度较快。但程序员是无法控制的。\n堆（Heap）：是由new分配的内存，一般速度比较慢，而且容易产生内存碎片,不过用起来最方便。")]),t._v(" "),s("h2",{attrs:{id:"_4、数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、数据结构"}},[t._v("#")]),t._v(" 4、数据结构")]),t._v(" "),s("p",[t._v("栈（Stack）：先进后出\n堆（Heap）：先进先出")])])}],!1,null,null,null);a.default=r.exports}}]);